#318778594 Gal Pearl
###########################################################
.data
###########################################################
.section 	  .rodata
format_scanfnum:   .string "%d\n"                    #format for number
format_scanfstring:.string "%s\n"                    #format for string
###########################################################
.section	.text
.global    main
    .type main, @function
###########################################################

main:
    push %rbp
    movq %rsp, %rbp
run_main:
                              
    #Receiving size of string 1: saved at r12
    movq    $0x00, %rsi                                    #zeroes for correct future instructions
    movq    $0x00, %rdi                                    #zeroes for correct future instructions
    movq    $0x00, %rax                                    #zeroes for correct future instructions
    sub     $40, %rbp                                      #allocate 40bytes
    leaq    format_scanfnum(%rip), %rdi                    #loading format and string for scanf on size
    leaq    -8(%rbp), %rsi                                 #storing size of string 1 in stack
    call    scanf                                          #receive user input for first size
    #Receiving the string  1    
    movq    $0x00, %rsi                                    #zeroes for correct future instructions
    movq    $0x00, %rdi                                    #zeroes for correct future instructions
    movq    $0x00, %rax                                    #zeroes for correct future instructions
    leaq    format_scanfstring(%rip), %rdi                 #loading format and string for scanf on data
    leaq    -16(%rbp), %rsi                                #storing string 1 in stack
    call    scanf                                          #receive user input for first string
    #Receiving size of string 2
    movq    $0x00, %rsi                                    #zeroes for correct future instructions
    movq    $0x00, %rdi                                    #zeroes for correct future instructions
    movq    $0x00, %rax                                    #zeroes for correct future instructions
    leaq    format_scanfnum(%rip), %rdi                    #loading format and string for scanf on size
    leaq    -24(%rbp), %rsi                                #storing size of string 2 in stack
    call    scanf                                          #receive user input for second size
    #Receiving the string 2
    movq    $0x00, %rsi                                    #zeroes for correct future instructions
    movq    $0x00, %rdi                                    #zeroes for correct future instructions
    movq    $0x00, %rax                                    #zeroes for correct future instructions
    leaq    format_scanfstring(%rip), %rdi                 #loading format and string for scanf on data
    leaq    -32(%rbp), %rsi                                #storing string 2 in stack
    call    scanf                                          #receive user input for second string
    #Enter menu option
    movq    $0x00, %rsi                                    #zeroes for correct future instructions
    movq    $0x00, %rdi                                    #zeroes for correct future instructions
    movq    $0x00, %rax                                    #zeroes for correct future instructions
    leaq    format_scanfnum(%rip), %rdi                    #loading format and string for scanf on data
    leaq    -40(%rbp), %rsi                                #storing menu selection in stack
    call    scanf
end:
    movq    $0x00, %rsi                                    #zeroes for correct future instructions
    movq    $0x00, %rdi                                    #zeroes for correct future instructions
    movq    $0x00, %rax                                    #zeroes for correct future instructions
    call    run_func
    addq    $40, %rbp
    movq    %rbp, %rsp
    popq    %rbp
    ret
    